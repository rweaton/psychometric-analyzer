function UnsortedEstimatedParamVals = EstimatedFourParameterMonteCarlo(EmpericalDataPoints, SOAs, nSamplesPerSOA, nIterations, nBins)

    % This function outputs Monte Carlo generated distributions of curve
    % fit parameters for the list of trial proportions by SOA contained
    % described by the arguements 'EmpericalDataPoints', 'SOAs' and 
    % 'nSamplesPerSOA'.  For each iteration, an array of simulated trial 
    % responses are generated by comparing random numbers to observed
    % proportion values for all of the SOAs.  The array is then fed into
    % the four parameter logistic curve fitting routine so the ideal curve
    % fit parameters can be obtained.  Each set of curve fit parameters is
    % stored for each iteration.  Columns of the output array 
    % 'UnsortedEstimatedParamVals' represent each of the four parameters
    % and each row are those Monte Carlo generated parameters for one
    % particular iteration.  The distributions of simulated values for the 
    % curve fit parameters can be examined by taking, and plotting a
    % histogram of each column.

     nSOAs = length(SOAs);
    
    UnsortedEstimatedParamVals = NaN*ones([nIterations,4]);
    
    %warning off all;
    
    SimulatedTrials = NaN*ones([sum(nSamplesPerSOA),2]);
    
    fprintf('Starting Monte Carlo Simulation.\n');
    fprintf('Each "." indicates 100 iterations\n');
    fprintf('Remember, patience is a virtue :)\n');
    
    for j = 1:nIterations
        
        StartIndex = 0;
        EndIndex = 0;
        
        for k = 1:nSOAs
            
            Criterion = EmpericalDataPoints(k)*ones([1,nSamplesPerSOA(k)]);
            EvokingSOAs = SOAs(k)*ones([1,nSamplesPerSOA(k)]);
            DataPoints = (rand([1,nSamplesPerSOA(k)]) < Criterion);
            
            StartIndex = EndIndex + 1;
            EndIndex = nSamplesPerSOA(k) + StartIndex - 1;
            
            SimulatedTrials(StartIndex:EndIndex,1) = EvokingSOAs;
            SimulatedTrials(StartIndex:EndIndex,2) = DataPoints;
            
                        
        end;
        
        UnsortedEstimatedParamVals(j,:) = ...
            make_4par_logisticMC(SimulatedTrials(:,1),SimulatedTrials(:,2),SimulatedTrials(:,2),SOAs);
        
        if  isequal(mod(j, 100),0)
           fprintf('.'); 
        end
        
    end;
    
%     fprintf('\n');
%     fprintf('Generating Parameter Histograms.\n');
%     
%     for k = 1:4
%         
%         UnsortedEstimatedParamDistn = ...
%             FilterOutNaNs(UnsortedEstimatedParamVals(:,k));
%         
%         Binsize = ...
%             (max(UnsortedEstimatedParamDistn) - ... 
%             min(UnsortedEstimatedParamDistn))/nBins;
%         
%         [BinCenters, BinBounds, EstimatedParamFrequencies] = ...
%             PlotHistogram(UnsortedEstimatedParamDistn, Binsize);
%         
%         EstimatedParamFrequencyHistogram = ...
%             NormalizeDistribution(EstimatedParamFrequencies,...
%                 [BinBounds, BinBounds(length(BinBounds))+Binsize]);
%     
%         SortedEstimatedParamDistn = sortrows(UnsortedEstimatedParamDistn);
%         
%         NormalizedSortedParamDistn = ...
%             SortedEstimatedParamDistn/sum(UnsortedEstimatedParamDistn);
%     
%         CumulativeDistn(1) = NormalizedSortedParamDistn(1);
%         
%         for ll = 2:length(NormalizedSortedParamDistn)
%         
%             CumulativeDistn(ll) = CumulativeDistn(ll-1) + ...
%                                     NormalizedSortedParamDistn(ll);
%         
%         end;
%         
%         Conf68Limit = interp1(CumulativeDistn, SortedEstimatedParamDistn, 0.68);
%         Conf32Limit = interp1(CumulativeDistn, SortedEstimatedParamDistn, 0.32);
%         
%         ParamStruct.NormalizedFrequencyHistogram = EstimatedParamFrequencyHistogram';
%         ParamStruct.BinCenters = BinCenters;
%         ParamStruct.BinSize = Binsize;
%         ParamStruct.NormalizedCumulativeFreqHisto = CumulativeDistn;
%         ParamStruct.SortedEstimatedParamDistn = SortedEstimatedParamDistn';
%         ParamStruct.Conf68Limit = Conf68Limit;
%         ParamStruct.Conf32Limit = Conf32Limit;
%         ParamStruct.StdErrRange = Conf68Limit - Conf32Limit;
%         
%         EstimatedParamMCOutputArray(k) = ParamStruct;
%     
%         %clear UnsortedEstimatedParamDistn
%     end
    
       
end